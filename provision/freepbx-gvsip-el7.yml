---
- hosts: all
  become: yes
  become_user: root
    
  vars:
    ## If using a version other than 1.1 you will need to change symlinking tasks
    ## Future upgrades of openssl using yum will break this
    openssl_archive: "https://www.openssl.org/source/openssl-1.1.0h.tar.gz"
    ## Hacked a task to update build_tools/make_version to use an appropriate version so freepbx works
    asterisk_archive: "https://api.github.com/repos/naf419/asterisk/tarball/gvsip"
    freepbx_archive: "http://mirror.freepbx.org/modules/packages/freepbx/freepbx-14.0-latest.tgz"
    repositories:
      - "http://li.nux.ro/download/nux/dextop/el7/x86_64/nux-dextop-release-0-1.el7.nux.noarch.rpm"
      - "https://mirror.webtatic.com/yum/el7/webtatic-release.rpm"
      - "https://rpm.nodesource.com/pub_8.x/el/7/x86_64/nodesource-release-el7-1.noarch.rpm"
    gvsip:
      - { number: '1112223333', oauth_clientid: 'asdf.apps.googleusercontent.com', oauth_secret: 'XXXXXX', refresh_token: 'asdfasdf' }
      - { number: '1112223334', oauth_clientid: 'asdg.apps.googleusercontent.com', oauth_secret: 'XXXXXY', refresh_token: 'asdfasdg' }
    asteriskInstalled: "no"
    opensslInstalled: "no"
    forceOpenSSL: "no"
    forceAsterisk: "no"
    updatepjsip: "yes"
      
  tasks:
     - name: Install firewalld
       yum: name=firewalld state=latest

     - name: Disable SELINUX
       selinux: state=disabled
  
     - name: Add Repositories
       yum: state=present name={{ item }}
       with_items:
          - "{{ repositories }}"
       
     - name: Upgrade All Packages
       yum: name=* state=latest
       
     - name: Install Packages
       yum: state=present name={{ item }} exclude=gstreamer1-plugins-ugly-devel-docs
       with_items:
          - php56w
          - php56w-pdo
          - php56w-mysql
          - php56w-mbstring
          - php56w-pear
          - php56w-process
          - php56w-xml
          - php56w-opcache
          - php56w-ldap
          - php56w-intl
          - php56w-soap
          - nodejs
          - libselinux-python
          - "@Development Tools"
          - lynx 
          - mariadb-server 
          - mariadb 
          - mysql-connector-odbc 
          - tftp-server 
          - httpd 
          - mod_ssl 
          - ncurses-devel 
          - sendmail 
          - sendmail-cf 
          - sox 
          - newt-devel 
          - libxml2-devel 
          - libtiff-devel 
          - audiofile-devel 
          - gtk2-devel 
          - subversion 
          - kernel-devel 
          - git
          - crontabs 
          - cronie 
          - vim
          - uuid-devel 
          - sqlite-devel 
          - net-tools 
          - gnutls-devel
          - jansson-devel 
          - mongodb-server 
          - ffmpeg 
          - ffmpeg-devel 
          - sox-devel 
          - lame 
          - lame-devel 
          - gstreamer* 
          - texinfo 
          - openssl
          - openssl-devel
      
     - name: Ensure asterisk group exists
       group:
         name: asterisk
         state: present
    
     - name: Ensure asterisk user exists
       user:
          name: asterisk
          state: present
          createhome: yes
          home: /home/asterisk
          comment: 'asterisk'
          uid: 1010
          group: asterisk
          groups: apache
          
     - name: Start and Enable mariadb
       service: name=mariadb state=started enabled=yes
 
     - name: Start and Enable mongod
       service: name=mongod state=started enabled=yes
       
     - name: Start and Enable httpd
       service: name=httpd state=started enabled=yes
 
     - name: Get Asterisk Version
       shell: asterisk -rx 'core show version' | awk '{print $2}'
       register: command_output
       changed_when: false

     - name: Determine if Asterisk Install/Upgrade is needed
       set_fact:
         asteriskInstalled="yes"
       when: command_output.stdout == "13.21.1"
       changed_when: false

     - name: Download and extract Asterisk packages
       unarchive:
         src: "{{ asterisk_archive }}"
         dest: /usr/src
         remote_src: yes
       when: forceAsterisk == "yes" or asteriskInstalled == "no"

     - name: Find Asterisk path
       find:
         file_type: directory
         paths: /usr/src
         patterns: "^naf419-asterisk"
         use_regex: yes
       register: asterisk_path
       when: forceAsterisk == "yes" or asteriskInstalled == "no"
       
     ## Required for naf419 branch to work with FreePBX
     - name: Update make version
       replace:
         dest: "{{ asterisk_path.files.0.path }}/build_tools/make_version"
         regexp: 'UNKNOWN__and_probably_unsupported'
         replace: '13.21.1'
         backup: no
       when: forceAsterisk == "yes" or asteriskInstalled == "no"

     - name: Install Asterisk prereqs using their provided script
       command: "contrib/scripts/install_prereq install"
       args:
         chdir: "{{ asterisk_path.files.0.path }}"
       changed_when: false
       when: forceAsterisk == "yes" or asteriskInstalled == "no"

     - name: Get OpenSSL Version
       shell: openssl version | awk '{print $2}'
       register: command_output
       changed_when: false

     - name: Determine if OpenSSL Install/Upgrade is needed
       set_fact:
         opensslInstalled="yes"
       when: command_output.stdout == "1.1.0h"

     - name: Download and extract OpenSSL 1.1 packages
       unarchive:
         src: "{{ openssl_archive }}"
         dest: /usr/src
         remote_src: yes
       when: forceOpenSSL == "yes" or opensslInstalled == "no"

     - name: Find OpenSSL path
       find:
         file_type: directory
         paths: /usr/src
         patterns: "^openssl"
         use_regex: yes
       register: openssl_path 
       when: forceOpenSSL == "yes" or opensslInstalled == "no"
       
     - name: Run final commands to config, make, and install OpenSSL
       command: "{{ item }}"
       args:
         chdir: "{{ openssl_path.files.0.path }}"
       with_items:
         - ./config
         - make
         - make install
       when: forceOpenSSL == "yes" or opensslInstalled == "no"
     
     - name: Create symlink for libsso.so    
       file:
         src: "/usr/local/lib64/libssl.so.1.1"
         dest: "/usr/lib64/libssl.so"
         state: link
         force: yes
       when: forceOpenSSL == "yes" or opensslInstalled == "no"
         
     - name: Create symlink for libsso.so.1.1  
       file:
         src: "/usr/local/lib64/libssl.so.1.1"
         dest: "/usr/lib64/libssl.so.1.1"
         state: link
         force: yes
       when: forceOpenSSL == "yes" or opensslInstalled == "no"
         
     - name: Create symlink for libcrypto.so 
       file:
         src: "/usr/local/lib64/libcrypto.so.1.1"
         dest: "/usr/lib64/libcrypto.so"
         state: link
         force: yes
       when: forceOpenSSL == "yes" or opensslInstalled == "no"
         
     - name: Create symlink for libcrypto.so.1.1  
       file:
         src: "/usr/local/lib64/libcrypto.so.1.1"
         dest: "/usr/lib64/libcrypto.so.1.1"
         state: link
         force: yes
       when: forceOpenSSL == "yes" or opensslInstalled == "no"
         
     - name: Copy original openssl exe
       copy: remote_src=True src=/usr/bin/openssl dest=/usr/bin/openssl_orig
       when: forceOpenSSL == "yes" or opensslInstalled == "no"
       
     - name: Remove original openssl exe
       file: path=/usr/bin/openssl state=absent
       when: forceOpenSSL == "yes" or opensslInstalled == "no"
      
     - name: Create symlink for openssl 1.1  
       file:
         src: "/usr/local/bin/openssl"
         dest: "/usr/bin/openssl"
         state: link
         force: yes
       when: forceOpenSSL == "yes" or opensslInstalled == "no"
         
     - name: Configure asterisk
       command: "{{ item.command }}"
       args:
         chdir: "{{ asterisk_path.files.0.path }}"
         #creates: "{{ item.creates }}"
       environment:
         CFLAGS: '-DENABLE_SRTP_AES_256 -DENABLE_SRTP_AES_GCM'
       with_items:
         #- { command: './configure --libdir=/usr/lib64 --with-pjproject-bundled --with-jansson-bundled', creates: "{{ asterisk_path.files.0.path }}/config.log" }
         - { command: './configure --libdir=/usr/lib64 --with-pjproject-bundled --with-jansson-bundled' }
         #- { command: 'contrib/scripts/get_mp3_source.sh', creates: "{{ asterisk_path.files.0.path }}/addons/mp3" }
         - { command: 'contrib/scripts/get_mp3_source.sh' }
         #- { command: 'make menuselect.makeopts', creates: "{{ asterisk_path.files.0.path }}/codecs/.makeopts" }
         - { command: 'make menuselect.makeopts' }
       when: forceAsterisk == "yes" or asteriskInstalled == "no"
       
     - name: Build and install asterisk
       command: "{{ item }}"
       args:
         chdir: "{{ asterisk_path.files.0.path }}"
       with_items:
         - menuselect/menuselect --enable format_mp3 --enable app_macro --enable app_statsd --enable codec_opus
         - make install
         - make config
       when: forceAsterisk == "yes" or asteriskInstalled == "no"

     - name: Make samples if initial Asterisk install
       command: "{{ item }}"
       args:
         chdir: "{{ asterisk_path.files.0.path }}"
       with_items:
         - make samples
       when: asteriskInstalled == "no"

     - name: Finish install asterisk
       command: "{{ item }}"
       args:
         chdir: "{{ asterisk_path.files.0.path }}"
       with_items:
         - ldconfig
       when: forceAsterisk == "yes" or asteriskInstalled == "no"
         
     - name: Make sure the default asterisk service is disabled
       service:
         name: "asterisk"
         enabled: no
       when: forceAsterisk == "yes" or asteriskInstalled == "no"
         
     - name: Update asterisk file 
       replace:
         dest: "/etc/asterisk/asterisk.conf"
         regexp: '\[directories\]\(!\)'
         replace: '[directories]'
         backup: no  
       when: forceAsterisk == "yes" or asteriskInstalled == "no"
         
     - name: Create symlink for tftpboot
       file:
         src: "/var/lib/tftpboot"
         dest: "/tftpboot"
         state: link
         force: yes
         
     - name: Make sure everything is owned by asterisk user
       file:
         path: "{{ item }}"
         owner: asterisk
         group: asterisk
         recurse: yes
       with_items:
         - /etc/asterisk
         - /var/www/
         - /var/run/asterisk
         - /var/lib/asterisk
         - /var/log/asterisk
         - /var/spool/asterisk
         - /usr/lib64/asterisk
         - /var/lib/tftpboot
         - /var/lib/php/session

     - name: Check if FreePBX directory exists
       stat:
         path: /var/www/html/admin
       register: freepbx_dir
       changed_when: false

     - name: Pull down Freepbx
       unarchive:
         src: "{{ freepbx_archive }}"
         dest: /usr/src
         remote_src: yes
       when: freepbx_dir.stat.exists and freepbx_dir.stat.isdir == false

     - name: Run install for Freepbx
       command: "{{ item.command }}"
       args:
         chdir: "/usr/src/freepbx"
         creates: "{{ item.creates }}"
       with_items:
         - { command: './start_asterisk start', creates: "/var/www/html/admin/" }
         - { command: './install -n', creates: "/var/www/html/admin/" }
  
     ## Must be done prior to copying freepbx startup script which doesn't
     ## support chkconfig
     - name: Enable asterisk
       service: name=asterisk enabled=yes
       
     - name: Copy original asterisk service script
       copy: remote_src=True src=/etc/init.d/asterisk dest=/etc/init.d/asterisk_orig
       when: freepbx_dir.stat.exists and freepbx_dir.stat.isdir == false
       
     - name: Remove original asterisk service script
       file: path=/etc/init.d/asterisk state=absent
       when: freepbx_dir.stat.exists and freepbx_dir.stat.isdir == false
       
     - name: Copy asterisk service script
       copy: remote_src=True src=/usr/src/freepbx/start_asterisk dest=/etc/init.d/asterisk mode=755
       when: freepbx_dir.stat.exists and freepbx_dir.stat.isdir == false
       
     - name: Make sure everything is owned by asterisk user
       file:
         path: "{{ item }}"
         owner: asterisk
         group: asterisk
         recurse: yes
       with_items:
         - /var/www/
         
     - name: Update httpd.conf
       replace:
         dest: "/etc/httpd/conf/httpd.conf"
         regexp: 'AllowOverride None'
         replace: 'AllowOverride All'
         backup: no
       notify: restart httpd
         
     - name: Update memory_limit
       ini_file:
         path: /etc/php.ini
         section: PHP
         option: "{{ item.option }}"
         value: "{{ item.value }}"
         backup: no
       with_items:
         - { option: 'upload_max_filesize', value: '1024M' }
         - { option: 'post_max_size', value: '1024M' }
         - { option: 'memory_limit', value: '256M' }
       notify: restart httpd 
    
     - name: Configure Apache with specific Freepbx Options
       lineinfile:
         path: "/etc/httpd/conf/httpd.conf"
         regexp: "{{ item.regexp }}"
         line: "{{ item.line }}"
       with_items:
         - { line: 'User asterisk', regexp: '^User ' }
         - { line: 'Group asterisk', regexp: '^Group ' } 
       notify: restart httpd   

     - name: Set mqueue folder permissions
       file:
         path: /var/spool/mqueue
         mode: 0755
         
     - name: Start and Enable firewalld
       service: name=firewalld state=started enabled=yes
 
     - name: Open port for www
       firewalld: port=80/tcp permanent=yes state=enabled
       notify: restart firewalld
       
     - name: Open port for https
       firewalld: port=443/tcp permanent=yes state=enabled
       notify: restart firewalld 
       
     - name: Open port for tcp-sip
       firewalld: port=5060/tcp permanent=yes state=enabled
       notify: restart firewalld
      
     - name: Open port for udp-sip
       firewalld: port=5060/udp permanent=yes state=enabled
       notify: restart firewalld
       
     - name: Open port for tls-sip
       firewalld: port=5061/tcp permanent=yes state=enabled
       notify: restart firewalld
       
     - name: Create pjsip_custom.conf
       template:
         src: template/pjsip_custom.j2
         dest: /etc/asterisk/pjsip_custom.conf
         owner: asterisk
         group: asterisk
         mode: 0644
       when: gvsip is defined and updatepjsip == "yes" and asteriskInstalled == "no"
       notify: restart asterisk

  handlers:
     - name: restart firewalld
       service: name=firewalld state=restarted
       
     - name: restart httpd
       service: name=httpd state=restarted
       
     - name: restart asterisk
       service: name=asterisk state=restarted
